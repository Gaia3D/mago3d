plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.convert' version '2.4.0'
    //id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'java'
	id 'war'
}

apply plugin: 'project-report'

group = 'com.gaia3d'
version = '2.5.1-SNAPSHOT'
sourceCompatibility = '16'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// gradle build -Pprofile=product (develop, test, local)
final String DEFAULT_PROFILE = 'local'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

sourceSets {
    main {
        resources {
            if (!project.hasProperty('profile') || !profile) {
                println " ========== > default profile is local. "
                ext.profile = DEFAULT_PROFILE
            }

            if (profile == 'product') {
                println " ===========> profile file is ${profile}"
                println " ===========> copy from src/main/resources/product to src/main/resources"

                copy {
                    from("src/main/resources/product") {
                        include 'application.properties'
                        include 'mago3d.properties'
                        include 'logback-spring.xml'
                    }
                    into "src/main/resources"
                }
                exclude "**/develop/*"
            } else if (profile == 'develop') {
                println " ===========> profile file is ${profile}"
                println " ===========> copy from src/main/resources/develop to src/main/resources"

                copy {
                    from("src/main/resources/develop") {
                        include 'application.properties'
                        include 'mago3d.properties'
                        include 'logback-spring.xml'
                    }
                    into "src/main/resources"
                }
                exclude "**/product/*"
            } else {
                println " ===========> profile file is ${profile}"
                //srcDir "src/main/resources"
                exclude "**/product/*"
                exclude "**/develop/*"
            }
        }
    }
}

dependencies {
	implementation project(':common')

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'

    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.security:spring-security-core:5.3.9.RELEASE'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.5.3'

    implementation 'org.apache.httpcomponents:httpclient'
    implementation 'org.apache.commons:commons-compress:1.18'

	implementation 'org.modelmapper:modelmapper:2.3.6'

	runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.postgresql:postgresql:42.2.14'
	
	//providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    //testCompile 'com.googlecode.json-simple:json-simple:1.1.1'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

test {
    outputs.dir snippetsDir
	useJUnitPlatform()
	ignoreFailures = true
    //exclude '**/*'
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    println " @@@@@ copyDocument execute @@@@@ "
    dependsOn asciidoctor
    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

task wrapper(type: Wrapper) {
    gradleVersion = '7.0.2'
}
